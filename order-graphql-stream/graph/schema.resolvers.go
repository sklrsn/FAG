package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.71

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/sklrsn/FAG/orders-graphql-stream/graph/model"
)

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: Orders - orders"))
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id uuid.UUID) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: Order - order"))
}

// Payment is the resolver for the payment field.
func (r *queryResolver) Payment(ctx context.Context, id uuid.UUID) (*model.Payment, error) {
	panic(fmt.Errorf("not implemented: Payment - payment"))
}

// Shipping is the resolver for the shipping field.
func (r *queryResolver) Shipping(ctx context.Context, id uuid.UUID) (*model.Shipping, error) {
	panic(fmt.Errorf("not implemented: Shipping - shipping"))
}

// Order is the resolver for the order field.
func (r *subscriptionResolver) Order(ctx context.Context, id uuid.UUID) (<-chan *model.Order, error) {
	panic(fmt.Errorf("not implemented: Order - order"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
